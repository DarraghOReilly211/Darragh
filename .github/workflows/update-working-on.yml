name: Update "What I'm working on"

on:
  # Run every 5 minutes
  schedule:
    - cron: "*/5 * * * *"
  # Also run whenever you push to the profile repo
  push:
    branches:
      - main
      - master
  # And allow manual runs from the Actions tab
  workflow_dispatch:

permissions:
  contents: write

# Avoid overlapping edits
concurrency:
  group: update-working-on
  cancel-in-progress: false

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update README with latest activity
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;

            // Helper: fetch recent public events (up to ~300)
            async function fetchRecentPublicEvents(username, pages = 10) {
              const events = [];
              for (let page = 1; page <= pages; page++) {
                const { data } = await github.rest.activity.listPublicEventsForUser({
                  username,
                  per_page: 30,
                  page
                });
                if (!data || data.length === 0) break;
                events.push(...data);
              }
              return events;
            }

            // 1) Find most recently pushed public repo (skip forks/archived)
            const { data: repos } = await github.rest.repos.listForUser({
              username: owner,
              per_page: 100,
              sort: 'pushed',
              direction: 'desc'
            });
            const recent = repos.find(r => !r.fork && !r.archived);
            if (!recent) {
              core.setFailed("Couldn't find a recent active public repository.");
              return;
            }

            // 2) Latest commit in that repo
            const { data: commits } = await github.rest.repos.listCommits({
              owner: recent.owner.login,
              repo: recent.name,
              per_page: 1
            });
            const latest = commits[0];

            const pushedAt = new Date(recent.pushed_at)
              .toISOString()
              .replace('T',' ')
              .replace('Z',' UTC');

            const firstLine = (latest?.commit?.message || '').split('\n')[0] || 'no commit message';
            const repoLine = `**${recent.full_name}** — latest commit: ${latest?.sha?.slice(0,7) || '???????'} — _${firstLine}_  \nPushed: ${pushedAt}  \nRepo: https://github.com/${recent.full_name}`;

            // 3) Activity metrics
            // 3a) Commits today (UTC) — via GraphQL contributions API (public contributions)
            const now = new Date();
            const startTodayUTC = new Date(Date.UTC(
              now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 0, 0, 0
            ));
            const endTodayUTC = new Date(Date.UTC(
              now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() + 1, 0, 0, 0
            ));

            const query = `
              query($login: String!, $from: DateTime!, $to: DateTime!) {
                user(login: $login) {
                  contributionsCollection(from: $from, to: $to) {
                    totalCommitContributions
                  }
                }
              }
            `;

            const res = await github.graphql(query, {
              login: owner,
              from: startTodayUTC.toISOString(),
              to: endTodayUTC.toISOString()
            });

            const commitsToday = res?.user?.contributionsCollection?.totalCommitContributions ?? 0;

            // 3b) Pushes this week (UTC) — count PushEvents in last 7 days (public only)
            const events = await fetchRecentPublicEvents(owner, 10);
            const weekAgoUTC = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);

            let pushesThisWeek = 0;
            for (const ev of events) {
              if (ev.type !== 'PushEvent') continue;
              const ts = new Date(ev.created_at);
              if (ts >= weekAgoUTC) {
                pushesThisWeek += 1;
              }
            }

            // 4) Read, replace both sections, and write README
            const path = 'README.md';
            const startA = '<!--START_SECTION:working_on-->';
            const endA   = '<!--END_SECTION:working_on-->';
            const startB = '<!--START_SECTION:activity_metrics-->';
            const endB   = '<!--END_SECTION:activity_metrics-->';

            let readme = fs.readFileSync(path, 'utf8');

            if (!readme.includes(startA) || !readme.includes(endA)) {
              core.setFailed('README markers for working_on not found.');
              return;
            }
            if (!readme.includes(startB) || !readme.includes(endB)) {
              core.setFailed('README markers for activity_metrics not found.');
              return;
            }

            const newWorkingOn = `${startA}\n${repoLine}\n${endA}`;
            const regexA = new RegExp(`${startA}[\\s\\S]*?${endA}`);
            readme = readme.replace(regexA, newWorkingOn);

            const metricsBlock = [
              `**Commits today (UTC):** ${commitsToday}`,
              `**Pushes this week (UTC):** ${pushesThisWeek}`
            ].join('\n');

            const newMetrics = `${startB}\n${metricsBlock}\n${endB}`;
            const regexB = new RegExp(`${startB}[\\s\\S]*?${endB}`);
            readme = readme.replace(regexB, newMetrics);

            fs.writeFileSync(path, readme);
            core.info('README updated.');

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update README with latest project activity"
